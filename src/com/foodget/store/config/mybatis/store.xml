<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.foodget.store.model.dao.StoreDaoImpl">
    
    <!--    <typeAlias alias="mdto" type="com.kitri.member.model.MemberDto"/>-->
    <!-- 현재 xml에서 사용됨 (지역변수같은 것)-->
    
    <select id="storeCheck" parameterType="sdto" resultType="int">
        select count(store_seq)
        from store
        where store_name = #{store_name}
        and store_address = #{store_address}
    </select>
    
    <insert id="storeInsert" parameterType="sdto">
        insert into store (store_seq, store_name, store_address, store_phone, hot_taste, sour_taste, clean_taste, sweet_taste, fresh_taste, k_hot_taste, store_latitude, store_longitude)
        values(store_seq.nextval, #{store_name}, #{store_address}, #{store_phone}, 0, 0, 0, 0, 0, 0, #{store_latitude}, #{store_longitude})
    </insert>
    
    <select id="storeInfo" parameterType="sdto" resultType="sdto">
        select store_seq, store_name, store_address, store_phone, hot_taste, sour_taste, clean_taste, sweet_taste, fresh_taste, k_hot_taste, store_latitude, store_longitude
        from store
        where store_seq = #{store_seq}
    </select>
    
    <select id="storeSearch" parameterType="String" resultType="sdto">
        select store_seq, store_name, store_address, store_phone, hot_taste, sour_taste, clean_taste, sweet_taste, fresh_taste, k_hot_taste, store_latitude, store_longitude
        from store
        where store_name = #{store_name}
        and store_address = #{store_address}
    </select>
    
    <update id ="mergeBlog" parameterType="blogdto">
        MERGE INTO BLOG b
        USING dual
        on (b.URL = #{url} )
        WHEN MATCHED THEN
        UPDATE SET
        b.STORE_PHONE = #{store_phone}
        WHEN NOT MATCHED THEN
        INSERT (b.URL,b.BLOG_NUMBER,b.OLD_ADDRESS,b.NEW_ADDRESS,b.RANK_SCORE,b.STORE_SEQ,b.description)
        values (#{url}, #{blog_number}, #{old_address}, #{new_address}, #{rank_score}, 316,#{description})
    </update>
    
    <insert id="insertBlogRank" parameterType="blogrankdto">
        MERGE INTO BLOG_RANK br
        USING dual
        on (br.URL = #{url} )
        WHEN MATCHED THEN
        UPDATE SET
        br.COMMENT_COUNT = #{comment_count}
        WHEN NOT MATCHED THEN
        insert (URL, BLOG_WRITER_ID, COMMENT_COUNT, BODY_LENTH,IMAGE_COUNT)
        values(#{url},#{blog_writer_id},#{comment_count},#{body_lenth},#{image_count})
    </insert>
    <insert id="insertBlogImage" parameterType="blogimgdto">
        INSERT ALL
        <foreach collection="imgSrcList" item="item" separator=" ">
            INTO blog_image(URL, IMAGE_URL) VALUES 
            (#{url, jdbcType=VARCHAR}, #{item, jdbcType=VARCHAR} )
        </foreach>
        SELECT * FROM DUAL
    </insert>
    
    <update id="insertKeyword" parameterType="String">
        merge into search s
        using dual
        on (s.keyword = #{keyword})
        when matched then
        update set
        s.hit = s.hit+1
        when not matched then
        insert (keyword, hit)
        values(#{keyword}, 1)
    </update>
    
    <select id="search" parameterType="String" resultType="searchdto">
        select keyword
        from  ( 
        select case when keyword &lt; 'ㄱ' then substr(keyword, 1, 1) 
        when ascii('ㄱ') &lt;= ascii(keyword) and ascii(keyword)&lt;= ascii('ㅎ') then keyword 
        when keyword &lt; '나' then 'ㄱ'
        when keyword &lt; '다' then 'ㄴ'
        when keyword &lt; '라' then 'ㄷ'
        when keyword &lt; '마' then 'ㄹ'
        when keyword &lt; '바' then 'ㅁ'
        when keyword &lt; '사' then 'ㅂ'
        when keyword &lt; '아' then 'ㅅ'
        when keyword &lt; '자' then 'ㅇ'
        when keyword &lt; '차' then 'ㅈ'
        when keyword &lt; '카' then 'ㅊ'
        when keyword &lt; '타' then 'ㅋ'
        when keyword &lt; '파' then 'ㅌ'
        when keyword &lt; '하' then 'ㅍ'
        else 'ㅎ'
        end as sung, keyword 
        from search
        order by keyword
        ) a
        where a.sung = #{keyword}      
    </select>
</mapper>
